#!/usr/bin/env bash

# Exit on error
set -e

source $1

hostname="${server_hostname:-`hostname -f`}"

function handle_error {
  echo "DB backup failed."
  ERR_THROWN="${1:-Unknown error}"
  ERR_MSG="DB Backup - $backup_db_name: FAILED ($ERR_THROWN)"

  {% for webhook in alerts %}
  curl -X POST -H 'Content-type: application/json' --data "{'text':'$ERR_MSG'}" '{{ webhook.url }}'
  {% endfor %}
  exit
}

function send_notification {
  echo "Sending notification."
  MSG="${1:-No message configured.}"
  NOTIFICATION_MSG="DB Backup - $backup_db_name: $MSG"

  {% for webhook in notifications %}
  curl -X POST -H 'Content-type: application/json' --data "{'text':'$NOTIFICATION_MSG'}" '{{ webhook.url }}'
  {% endfor %}
}

echo "Ensure the DB backup location"
mkdir -p "$db_backup_dir_local"

echo "Starting DB dump at $backup_path_local..."

{% if db_type == 'mysql' %}
out=$(mysqldump $backup_db_name) && echo $out | gzip > "$backup_path_local" || handle_error "mysqldump and compress failed."
{% elif db_type == 'postgres' %}
out=$(pg_dump $backup_db_name) && echo $out | gzip > "$backup_path_local" || handle_error "pgdump and compress failed."
{% endif %}

echo "Syncing DB Backup file from $db_backup_dir_local/ to s3://$db_backup_bucket_name/$backup_path_remote/$hostname/$backup_db_name/"
/usr/local/bin/s3cmd sync $db_backup_dir_local/* s3://$db_backup_bucket_name/$backup_path_remote/$hostname/$backup_db_name/ --recursive  || handle_error "Upload on S3 failed."

send_notification "DB backup files synced  at: s3://$db_backup_bucket_name/$backup_path_remote/$hostname/$backup_db_name/"

#echo "Deleting files from $db_backup_dir_local/"
#rm -rf $db_backup_dir_local/* || handle_error 'DB Backup local cleanup failed.'

